= Introduction=


This is the documentation of the Ocsigen Framework
(development version). It explains how to use the //Ocsigen// web server
and how to program web sites and client-server web applications in
//Objective Caml// using //Eliom//. It also contains the documentation for
several tools and libraries you can use for non Ocsigen-releated projects:
* the cooperative threading library Lwt
* the database query library Macaque
* the Js_of_ocaml compiler (from Ocaml bytecode to Javascript)
* the O'Closure library, a binding for the Google closure Javascript widget
library to be used with Js_of_ocaml.


<<div class="wip"|
This manual in under construction.
Please report any error in this tutorial
and send us your comments and suggestions!
>>

==Eliom==
            
Eliom is an extension for the //Ocsigen// web server
that allows the creation of client/server web applications (or traditional dynamic websites) in Objective Caml.
It implements many new concepts, and as a result, its approach to application development is very different 
from all other web programming tools.

=== High level primitives ===
Eliom enables the creation of complex web sites in very few lines of code, by providing high level programming primitives for many aspects of web programming: communication between the client and the server, implementation of complex web interaction, sessions, etc.
<<span class="wip"|continuations?>>

=== Static typing ===
Eliom also improves the stability of your application by  making extensive use of OCaml's static typing. For example, the validity of pages (e.g. well-formed XHTML) is checked at compile time!  Moreover, Eliom also statically checks, for example, that your web site does not contain broken links or that the parameters in a link or a form correspond to the service it leads to (and many other things).

=== A client/server application in one piece of code! ===
But one of the most significant features of Eliom 2 is that it allows to program both sides of a web application as a single program. The client side parts are automatically extracted and compiled into Javascript to be executed in the browser. The communication between the server is straightforward (in both directions!), as you can use server side values in the client side code.

=== Security ===
Eliom helps you to make your web application secure by automatically addressing several common security issues (code injection, session fixation~ ...) and by providing features to implement very secure behaviours (avoiding for example "cross-site request forgery").\\

\\

The first part of this manual is an overview of Ocsigen's features.
Read them to understand the basics,
then refer to subsequent chapters for more detail.

//Warning:// This programming guide assumes you know the
//Objective Caml// language, and that you have a working installation of //Ocsigen server//, //Eliom//, //Lwt//, //Js_of_ocaml//, (and //O'Closure// for some examples). In particular, you need to have the interfaces (cmi) installed for all these packages. They are sometimes in separate packages ("{{{-dev}}}" packages in Debian/Ubuntu). We recommend to use the packages from your distribution if they are available. If not, try to install all OCaml related packages with [[http://godi.camlcity.org|Godi]]. If it does not work, please report the problem to the package maintainers. We recommend to use the source packages only if you want to test unreleased features from development versions.
            
